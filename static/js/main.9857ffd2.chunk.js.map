{"version":3,"sources":["components/Player/Player.js","components/Player/Player1.js","actions.js","components/Player/Player2.js","components/Winner/Winner.js","components/Winner/index.js","components/Reset/Reset.js","components/Reset/index.js","components/Form/Form.js","components/Form/index.js","App.js","reportWebVitals.js","initial.js","reducer.js","store.js","index.js"],"names":["Player","player","handleIncrement","server","score","playerName","className","onClick","connect","state","player1","name1","dispatch","type","player2","name2","Winner","winner","Reset","handleReset","Form","props","winningScore","serveChange","handleName1","bind","handleName2","handleWinningScore","handleServeChange","handleFormSubmit","e","this","setState","currentTarget","value","console","log","preventDefault","submitForm","onSubmit","class","for","id","onChange","selected","Component","saveSettings","showForm","Player1","Player2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initial","awardWinner","reducer","action","whoWins","total","Math","floor","whoServes","save","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9857ffd2.chunk.js","sourcesContent":["\nconst Player = ({ player, handleIncrement, server, score, playerName }) => {\n    return (\n    <div className=\"col-md-6 mt-4\">\n        <div className={`card text-center ${server === player ? \"bg-dark text-white\" : null}`}>\n            <h5 className=\"card-header\">Player: {playerName}</h5>\n            <div className=\"card-body\">\n            <p className=\"card-text display-1\">{score}</p>\n            </div>\n            <div className=\"card-footer\">\n                <button className=\"form-control btn btn-success\" onClick={handleIncrement}>+</button>\n            </div>\n        </div>\n    </div>\n    )\n};\n\nexport default Player;\n\n","import { connect } from \"react-redux\"\nimport Player from \"./Player\"\nimport {score1} from \"../../actions\"\n\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        score: state.player1,\n        server: state.server,\n        playerName: state.name1,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleIncrement:() => dispatch(score1()) // this score1 is referenced in the actions.js which is establasing\n                                                 // player to be equal to\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)","export const reset = () => {\n    return {\n        type: \"RESET\",\n    }\n}\n\nexport const score = () => {\n    return {\n        type: \"SCORE\",\n        player: 2,\n    }\n}\n\nexport const score1 = () => {\n    return {\n        type: \"SCORE\",\n        player: 1,\n    }\n}\n\nexport const saveSettings = (state) => {\n    let {name1, name2, winningScore, serveChange} = state;\n    return {\n        type: \"SAVE_SETTINGS\",\n        name1: name1,\n        name2: name2,\n        winningScore: winningScore,\n        serveChange: serveChange,\n    }\n}\n// returning an object with a type property and any other properties we want to send to the reducer\n","\nimport { connect } from \"react-redux\"\nimport Player from \"./Player\"\nimport {score} from \"../../actions\"\n\n\nconst mapStateToProps = (state) => {\n\n    return {\n        score: state.player2,\n        server: state.server,\n        playerName: state.name2,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleIncrement: () => dispatch(score()) // this score1 is referenced in the actions.js which is establishing\n                                                 // player to be equal to 2\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Player)","\nconst Winner = ({winner}) => {\n    return (\n        winner === 0 ? null : <h2 className=\"alert alert-success\">Player {winner} wins!</h2>\n    )\n};\n\nexport default Winner;","import { connect } from \"react-redux\"\nimport Winner from \"./Winner\"\n\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        winner: state.winner, // state.winner is from the initial component which stores intitial state\n        // state. winner is worked out from the reducer methods\n    };\n};\nexport default connect(mapStateToProps)(Winner)","\nconst Reset = ({handleReset}) => {\n    return (\n        <button className=\"btn btn-danger\" onClick={handleReset}>Reset</button>\n    )\n};\n\nexport default Reset;","import { connect } from \"react-redux\"\nimport Reset from \"./Reset\"\nimport {reset} from \"../../actions\"\n\n\n\n// we use a map dispatch to props \nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleReset: () => dispatch(reset()),\n    };\n}\nexport default connect(null, mapDispatchToProps)(Reset)","import {Component} from \"react\"\nclass Form extends Component {\n    constructor(props){\n        super(props)\n\n\n\n    this.state = { \n        name1: \"\",\n        name2: \"\",\n        winningScore: \"\",\n        serveChange: \"\",\n     }\n\n\n\n    this.handleName1 = this.handleName1.bind(this);\n    this.handleName2 = this.handleName2.bind(this);\n    this.handleWinningScore = this.handleWinningScore.bind(this);\n    this.handleServeChange = this.handleServeChange.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n}\n    handleName1(e) {\n        this.setState({name1: e.currentTarget.value})\n    }\n\n    handleName2(e) {\n        this.setState({ name2: e.currentTarget.value })\n    }\n    handleWinningScore(e) {\n        this.setState({ winningScore: e.currentTarget.value })\n    }\n    handleServeChange(e) {\n        this.setState({ serveChange: e.currentTarget.value })\n    }\n\n    handleFormSubmit(e) {\n        console.log(\"worked\")\n        e.preventDefault();\n        this.props.submitForm({...this.state})\n    }\n\n\n\n    render() {\n        console.log(this.props)\n        const {name1, name2, winningScore, serveChange} = this.state\n        return (\n            <>\n            <h1>PongPing</h1>\n                <form onSubmit={this.handleFormSubmit}>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Player 1 Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"name1\"onChange={this.handleName1} value={name1}/>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Player 2 Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"name2\" onChange={this.handleName2} value={name2}  />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Winning Score</label>\n                    <input type=\"text\" class=\"form-control\" id=\"winningScore\" onChange={this.handleWinningScore} value={winningScore}  />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Alternate Every</label>\n                    <select className=\"form-control\" id=\"serveChange\" onChange={this.handleServeChange} value={serveChange}>\n                        <option selected>Choose...</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                    </select>\n                </div>\n                    <button type=\"submit\" class=\"btn btn-primary\" >Start Game</button>\n            </form>\n            </>\n        );\n    }\n}\n\nexport default Form;\n\n","import { connect } from \"react-redux\"\nimport Form from \"./Form\"\nimport {saveSettings} from \"../../actions\"\n\n\n\n\n// const mapStateToProps = (state) => {\n//     return {\n//         winner: state.winner,\n//     };\n// };\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n            submitForm: (state)=>(dispatch(saveSettings(state)))\n    };\n};\nexport default connect(null, mapDispatchToProps)(Form)\n\n","import Player1 from \"./components/Player/Player1\";\nimport Player2 from \"./components/Player/Player2\"\nimport Winner from \"./components/Winner\"\nimport Reset from \"./components/Reset\"\nimport Form from \"./components/Form\"\nimport {connect} from \"react-redux\"\n\n// App is a component which displays all the components that the App is made out of \n\nconst mapStateToProps = (state) => {\n  return {\n    showForm: state.showForm, // state.winner is from the initial component which stores intitial state\n    // state. winner is worked out from the reducer methods\n  };\n};\n\nconst App = ({showForm}) => {\n  return showForm  ?\n    <Form /> : <>\n    {/* header */}\n    <header className=\"jumbotron mt-4 mb-0\">\n      <h1>PongPing</h1>\n    </header>\n\n    {/* scores */}\n    <div className=\"row mb-4\">\n      <Player1 player= {1} />\n      <Player2 player= {2} />\n    </div>\n\n    { /* winner message */}\n    <Winner />\n    <hr />\n\n    { /* reset button */}\n    <Reset />\n  </>\n};\n\nexport default connect(mapStateToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initial = {\n    player1: 0,\n    player2: 0,\n    server: 1, // means player 1 serves\n    winner: 0,\n    name1: \"\",\n    name2: \"\",\n    winningScore: 21,\n    serveChange: 5,\n    showForm: true,\n};\n// the initial state\n\n// these are all the initial states.\nexport default initial;","import initial from \"./initial\";\n\n\nconst awardWinner = (state) => {\n\n    return state.player1 > state.player2 ? 1 : 2 // this is part of the whoWins method.\n}\nconst whoWins = (state) => {\n    return {\n        ...state,\n        winner: state.player1 >= state.winningScore || state.player2 >= state.winningScore ? awardWinner(state) : 0\n    }\n}\n\nconst score = (state, action) => { // function that adds 1 on to the player that got a point\n    // state is initial and action is an object that is passed through from the render dom\n    console.log(action)\n    return {\n        ...state,\n        player1: action.player === 1 ? state.player1 + 1 : state.player1, // action.player is specified in actions.js\n        player2: action.player === 2 ? state.player2 + 1 : state.player2,\n    }\n}\n\n\nconst whoServes = (state) => {\n    let total = state.player1 + state.player2 // total of points given\n    return {\n        ...state,\n        server: Math.floor(total / state.serveChange) % 2 ? 2 : 1, // this is an equation to change 2 to 1 every 5 serves\n\n    }\n}\n\nconst save = (state, action) => {\n    const {name1, name2, serveChange, winningScore} = action\n    return {\n        ...state,\n        name1: name1,\n        name2: name2,\n        serveChange: serveChange ? serveChange : initial.serveChange,\n        winningScore: winningScore ? winningScore : initial.winningScore ,\n        showForm: false,\n    }\n}\n// ones on the left are current state, ones on the right are from the action, \n// resetting the current state to be the action properties\n\n\n// reducer gets given the current version of the state\n// and the action that called it, has a \"type\" property\nconst reducer = (state, action) => {\n    // depending on what the actions type property is, we can do different things with it\n    switch (action.type) {\n        case \"SCORE\": return whoWins(whoServes(score(state, action))); // example of composing functions\n        case \"RESET\": return initial;\n        case \"SAVE_SETTINGS\": return save(state, action); // current state and the action object passed through from actions.js\n        default: return state;\n    }\n\n}\n\nexport default reducer;","import {createStore} from \"redux\"\nimport reducer from \"./reducer\"\nimport initial from \"./initial\"\n\nconst store = createStore(\n    reducer,\n    initial,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n// subscribe to any changes\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\n\n\n\n\n\n  ReactDOM.render(\n      <React.StrictMode>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </React.StrictMode>,\n      document.getElementById('root')\n  );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}